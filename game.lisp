(in-package #:gw)

(defclass game-state (has-time-alive)
  ((current-fps :accessor current-fps :initform 0)
   (score :accessor score :initform 0 :type integer)
   (lives :accessor lives :initform 3 :type unsigned-byte)
   (active-shots :accessor active-shots :initform NIL :type  list)
   (active-spawn-strategies :accessor active-spawn-strategies :initform NIL
                            :type list)
   (active-enemies :accessor active-enemies :initform NIL :type list)
   (objects :accessor objects :initform NIL :type list)))

(defmethod tick :around ((state game-state)
                         &optional (current-time (get-current-time)))
  (let ((old-time (current-time state)))
    (call-next-method state current-time)
    (loop for object in (objects state) do (tick object current-time))
    (setf (current-fps state)
          (handler-case (/ 1 (- current-time (or old-time 0)))
            (division-by-zero (e) 0)))))

(defgeneric add-object (state object))
(defmethod add-object ((state game-state) (object has-representation))
  (setf (creation-time object) (current-time state))
  (setf (objects state) (cons object (objects state))))
